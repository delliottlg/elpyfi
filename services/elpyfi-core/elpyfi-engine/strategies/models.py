from dataclasses import dataclass
from typing import Optional, Dict, Any
from datetime import datetime


@dataclass
class StrategyConfig:
    """Configuration for a trading strategy"""
    day_trade_budget: float      # 0.0-1.0 portion of weekly 3 trades
    min_hold_period: str         # "0 days", "1 day", "1 week"
    preferred_timeframe: str     # "1min", "5min", "1hour", "1day"
    max_position_size: float = 0.1  # Max 10% of portfolio per trade
    stop_loss: float = 0.02         # 2% default stop loss
    
    def __post_init__(self):
        # Validate configuration
        if not 0.0 <= self.day_trade_budget <= 1.0:
            raise ValueError("day_trade_budget must be between 0.0 and 1.0")
        if self.max_position_size <= 0 or self.max_position_size > 1.0:
            raise ValueError("max_position_size must be between 0 and 1.0")
        if self.stop_loss <= 0 or self.stop_loss >= 1.0:
            raise ValueError("stop_loss must be between 0 and 1.0")


@dataclass
class Signal:
    """Trading signal generated by a strategy"""
    action: str              # "buy", "sell", "hold"
    confidence: float        # 0.0-1.0 confidence score
    symbol: str             # Trading symbol
    target_price: Optional[float] = None
    stop_price: Optional[float] = None
    metadata: Optional[Dict[str, Any]] = None
    
    def __post_init__(self):
        # Validate signal
        if self.action not in ["buy", "sell", "hold"]:
            raise ValueError(f"Invalid action: {self.action}")
        if not 0.0 <= self.confidence <= 1.0:
            raise ValueError("confidence must be between 0.0 and 1.0")
        if not self.symbol:
            raise ValueError("symbol cannot be empty")


@dataclass  
class MarketData:
    """Market data for analysis"""
    symbol: str
    timestamp: datetime
    current_price: float
    volume: float
    high: float
    low: float
    open: float
    close: float
    indicators: Optional[Dict[str, float]] = None  # RSI, MA, etc
    
    def __post_init__(self):
        # Validate market data
        if self.current_price <= 0:
            raise ValueError("current_price must be positive")
        if self.volume < 0:
            raise ValueError("volume cannot be negative")
        if self.high < self.low:
            raise ValueError("high cannot be less than low")
        
    @property
    def price_range(self) -> float:
        """Calculate the price range (high - low)"""
        return self.high - self.low
    
    @property
    def is_green_candle(self) -> bool:
        """Check if close > open"""
        return self.close > self.open